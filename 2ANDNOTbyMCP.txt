import numpy as np

# McCulloch-Pitts model of a neuron
def step_function(x):
    return 1 if x >= 0 else 0

def andnot_neuron(A, B):
    # Define the weights and bias
    w1 = 1  # Weight for input A
    w2 = -1  # Weight for input B (we use negative weight for B to simulate NOT)
    bias = -0.5  # Bias to adjust the threshold
    
    # Calculate the input to the neuron (weighted sum of inputs + bias)
    total_input = A * w1 + B * w2 + bias
    
    # Output based on step function (threshold at 0)
    return step_function(total_input)

# Test the ANDNOT function for all combinations of A and B
inputs = [
    (0, 0), 
    (0, 1), 
    (1, 0), 
    (1, 1) ]

# Display the results
print("A ANDNOT B")
for A, B in inputs:
    output = andnot_neuron(A, B)
    print(f"Input A: {A}, Input B: {B} => Output: {output}")
